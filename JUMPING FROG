int pantalla = 0;
PImage portada;
PImage instrucciones;
PImage juego;
PImage rana;
PImage pajaro;
PImage resultado;
PImage lengua;
PImage mosca;

PFont font;
String time = "000";
int initialTime;
int interTime;
int interval = 1000;//one second
int timer;
int xRana=450, yRana=380;
int xMosca, yMosca=250;
int xPajaro=0;
int conteo =0;
int caso_Mosca=0;

void inicio()
{
  //PANTALLAS
  portada = loadImage("PORTADA.jpg");  
  instrucciones = loadImage("instrucciones.jpg");
  juego = loadImage("fondo.jpg");
  
  //ANIMALES
  rana = loadImage("rana.png");
  lengua = loadImage("lengua.png");
  pajaro = loadImage("pajaro.png");
  mosca = loadImage("mosca.png");
  
  // Initialize box2d physics and create the world
  box2d = new Box2DProcessing(this);
  box2d.createWorld();
  // Turn on collision listening!
  box2d.listenForCollisions();
  // Create the empty list
  particles = new ArrayList<Particle>();
  wall = new Boundary(width/2, height-5, width, 10);

  resultado = loadImage("RESULTADO.jpg");

  //____________________TIMER____________________________________________________  
  font = createFont("Arial", 50);
  fill(0);
  initialTime = millis();
  frameRate(30);// changed framerate to exemplify
  //xMosca = (int)random(10, width-10);
}    

void setup()
{
  background(0);
  smooth();
  size(900, 500);
  inicio();
}    

void draw()
{
  switch(pantalla)
  {
              case 0:
    pantalla_1();
    break;

  case 1:
    pantalla_2();
    break;

  case 2:
    pantalla_3();
    break;

  case 3:
    pantalla_4();
    break;
  }
}

void pantalla_1()
{
  background(0);
  image(portada, 0, 0);
  if (mousePressed == true) {
    pantalla = 1;
  }
}

void pantalla_2()
{
  background(0);
  image(instrucciones, 0, 0);
  if (keyPressed)
  {
    if (key == 's' || key == 'S')
    {
      pantalla = 2;
    }
  }
  interTime = millis();
}

void pantalla_3()
{
  background(0);
  image(juego, 0, 0);
  image(rana, xRana, yRana);  
  image(pajaro, xPajaro, 250);

  //COMPORTAMIENTO DEL AVE
  xPajaro+=5;
  if (xPajaro > width)
    xPajaro=-50;  


  //CONTROL DE LA RANA
  if (keyPressed && key == CODED)
  {
    if (keyCode == RIGHT)
      xRana +=10;
    else if (keyCode == LEFT)
      xRana -=10;
  }
  if (keyPressed)
  {
    if (key == 32) // space,  (key == ' ') TAMBIÉN FUNCIONA
    {
      image(lengua, xRana+70, yRana-150, 200, 200);
      
      if ((xRana > xPajaro-250) && (xRana < xPajaro-210))
      {
        conteo-=30;
      }
    }
  }

  // COMPORTAMIENTO DE LAS MOSCAS
  if (random(6) < 0.1) { //VELOCIDAD CON LA QUE APARECEN
    float sz = random(4, 8);
    particles.add(new Particle(random(width), 20, sz, int(random(0, 4))));
  }

  // We must always step through time!
  box2d.step();

  // Look at all particles
  for (int i = particles.size()-1; i >= 0; i--) {
    Particle p = particles.get(i);
    p.display();
    // Particles that leave the screen, we delete them
    // (note they have to be deleted from both the box2d world and our list
    if (p.done()) {
      particles.remove(i);
    }
  }
  wall.display();


  //______________________TIMER__________________________________
  pushMatrix();
  translate(380, -220);
  fill(0);
  textSize(30);
  timer =int(millis()/1000)-interTime/1000;
  if (millis() - initialTime > interval) {
    time = nf(timer, 3);
  }

  text(time, width/2, height/2);
  text(conteo, width/2, height/2+30);
  if (timer == 60) {
    pantalla = 3;
  }
  popMatrix();
}


void pantalla_4()
{
  background(0);
  image(resultado, 0, 0);
  textSize(24);
  text("Puntuación:", 330, 250);
  text(conteo, 500, 250);
  if (keyPressed)
  {
    if (key == 'e' || key == 'E')
    {
      pantalla = 0;
      timer=0;
      conteo=0;
    }
  }
}

class Particle {

  // We need to keep track of a Body and a radius
  Body body;
  float r;
  color col;
  boolean delete = false;
  int tipo;

  Particle(float x, float y, float r_, int tipo_) {
    r = r_;
    tipo =  tipo_;

    // This function puts the particle in the Box2d world
    makeBody(x, y, r);
    body.setUserData(this);
    col = color(175);
  }

  // This function removes the particle from the box2d world
  void killBody() {
    box2d.destroyBody(body);
  }

  void delete() {
    delete = true;
  }

  // Change color when hit
  void change() {
    col = color(255, 0, 0);
  }

  boolean done() {
    // Let's find the screen position of the particle
    Vec2 pos = box2d.getBodyPixelCoord(body);

    // Is it off the bottom of the screen?
    if (pos.y > height+r*2 || delete) {
      killBody();
      return true;
    }
    
    //SI TOCA LA PUNTA DE LA LENGUA
    if ((keyPressed==true&&key==' ')&&(pos.y>=yRana-150&&pos.y<=yRana)&&(pos.x > xRana+200&&pos.x < xRana+250))
    {
      killBody();
      conteo+=50;
      return true;
    }
    return false;
  }

  void display() {
    println(tipo);
    Vec2 pos = box2d.getBodyPixelCoord(body);
    pushMatrix();
    translate(pos.x, pos.y);
    fill(col);
    stroke(0);
    scale(.5);
    image(mosca, 0, 0);
    popMatrix();
  }

  // Here's our function that adds the particle to the Box2D world
  void makeBody(float x, float y, float r) {
    // Define a body
    BodyDef bd = new BodyDef();
    // Set its position
    bd.position = box2d.coordPixelsToWorld(x, y);
    bd.type = BodyType.DYNAMIC;
    body = box2d.createBody(bd);

    // Make the body's shape a circle
    CircleShape cs = new CircleShape();
    cs.m_radius = box2d.scalarPixelsToWorld(r);

    FixtureDef fd = new FixtureDef();
    fd.shape = cs;
    // Parameters that affect physics
    fd.density = 1;
    fd.friction = 0.01;
    fd.restitution = 0.3;

    // Attach fixture to body
    body.createFixture(fd);

    body.setAngularVelocity(random(-10, 10));
  }
}

class Boundary {

  // A boundary is a simple rectangle with x,y,width,and height
  float x;
  float y;
  float w;
  float h;

  // But we also have to make a body for box2d to know about it
  Body b;

  Boundary(float x_, float y_, float w_, float h_) {
    x = x_;
    y = y_;
    w = w_;
    h = h_;

    // Define the polygon
    PolygonShape sd = new PolygonShape();
    // Figure out the box2d coordinates
    float box2dW = box2d.scalarPixelsToWorld(w/2);
    float box2dH = box2d.scalarPixelsToWorld(h/2);
    // We're just a box
    sd.setAsBox(box2dW, box2dH);


    // Create the body
    BodyDef bd = new BodyDef();
    bd.type = BodyType.STATIC;
    bd.position.set(box2d.coordPixelsToWorld(x, y));
    b = box2d.createBody(bd);

    // Attached the shape to the body using a Fixture
    b.createFixture(sd, 1);

    b.setUserData(this);
  }

  // Draw the boundary, if it were at an angle we'd have to do something fancier
  void display() {
    stroke(0);
    rectMode(CENTER);
  }
}  

import shiffman.box2d.*;
import org.jbox2d.common.*;
import org.jbox2d.dynamics.joints.*;
import org.jbox2d.collision.shapes.*;
import org.jbox2d.collision.shapes.Shape;
import org.jbox2d.common.*;
import org.jbox2d.dynamics.*;
import org.jbox2d.dynamics.contacts.*;


// A reference to our box2d world
Box2DProcessing box2d;

// An ArrayList of particles that will fall on the surface
ArrayList<Particle> particles;

Boundary wall;


// Collision event functions!
void beginContact(Contact cp) {
  // Get both shapes
  Fixture f1 = cp.getFixtureA();
  Fixture f2 = cp.getFixtureB();
  // Get both bodies
  Body b1 = f1.getBody();
  Body b2 = f2.getBody();

  // Get our objects that reference these bodies
  Object o1 = b1.getUserData();
  Object o2 = b2.getUserData();

  if (o1.getClass() == Particle.class && o2.getClass() == Particle.class) {
    Particle p1 = (Particle) o1;
    p1.delete();
    Particle p2 = (Particle) o2;
    p2.delete();
  }

  if (o1.getClass() == Boundary.class) {
    Particle p = (Particle) o2;
    p.change();
  }
  if (o2.getClass() == Boundary.class) {
    Particle p = (Particle) o1;
    p.change();
  }
}
